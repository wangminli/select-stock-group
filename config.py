"""
wml：这个策略太炸裂了，年化收益/回撤比=4.29
累积净值                      356196.73
年化收益                        119.15%
最大回撤                        -27.74%
最大回撤开始时间    2024-01-02 00:00:00
最大回撤结束时间    2024-02-07 00:00:00
年化收益/回撤比                    4.29
盈利周期数                       1508.0
亏损周期数                       2449.0
胜率                             38.10%
每周期平均收益                    0.34%
盈亏收益比                         2.99
单周期最大盈利                   10.54%
单周期大亏损                    -10.05%
最大连续盈利周期数                 11.0
最大连续亏损周期数                 75.0
收益率标准差                      2.00%
分年收益率：
https://bbs.quantclass.cn/thread/64769
"""

"""
邢不行™️选股框架
Python股票量化投资课程

版权所有 ©️ 邢不行
微信: xbx8662

未经授权，不得复制、修改、或使用本代码的全部或部分内容。仅限个人学习用途，禁止商业用途。

Author: 邢不行
"""
import os
from pathlib import Path

# ====================================================================================================
# 1️⃣ 回测配置
# ====================================================================================================
# 回测数据的起始时间。如果因子使用滚动计算方法，在回测初期因子值可能为 NaN，实际的首次交易日期可能晚于这个起始时间。
start_date = '2009-01-01'
# 回测数据的结束时间。可以设为 None，表示使用最新数据；也可以指定具体日期，例如 '2024-11-01'。
end_date = '2025-08-08'

# ====================================================================================================
# 2️⃣ 数据配置
# ====================================================================================================
# 数据中心的文件夹，使用数据客户端，并订阅相关数据，就不需要再手动指定每一个必要数据
data_center_path = Path(r"/Users/wangminli/我的文档/Quant/邢不行量化课程-付费/下载数据")

# 数据源的定义，如果不使用数据客户端的时候，可以手动自定义以下逐个数据源
# ** 股票日线数据 和 指数数据是必须的，其他的数据可以在 data_sources 中定义 **
# (必选) 股票日线数据，全量数据下载链接：https://www.quantclass.cn/data/stock/stock-trading-data
# 参考：https://bbs.quantclass.cn/thread/39599
stock_data_path = data_center_path / "stock-trading-data"
# (必选) 指数数据路径，全量数据下载链接：https://www.quantclass.cn/data/stock/stock-main-index-data
index_data_path = data_center_path / "stock-main-index-data"
# (可选) 财务数据，全量数据下载链接：https://www.quantclass.cn/data/stock/stock-fin-data-xbx
fin_data_path = data_center_path / "stock-fin-data-xbx"


# ====================================================================================================
# 3️⃣ 策略配置
# ====================================================================================================
strategy = {
    'name': '策略',  # 策略名
    'hold_period': '3D',  # 持仓周期，W 代表周，M 代表月，还支持日频：3D、5D、10D
    'select_num': 10,  # 选股数量，可以是整数，也可以是小数，比如 0.1 表示选取 10% 的股票
    "factor_list": [  # 选股因子列表
        ("市值", True, None, 1),
        # ("量价背离", True, [20, "bottom"], 1),  # 底背离作为主要选股因子
        # ("箱体突破", True, [20, "up"], 1),
        # ("箱体突破回踩", True, [20, 5], 1),
        ("超跌反弹", True, [20, 5, -0.2], 1)
    ],
    "filter_list": [
        ('市值', None, 'pct:<=0.1', True),
        # ('10日均线', True, 'val:==1'),
        # ('10日均线偏离幅度', 0.04, 'val:==1'),
        ('主板', True, 'val:==1'),
        # ('RSI相对强弱', 14, 'val:<=0.7', True),
        # ('量价背离', [20, "bottom"], 'val:>=0.5', True),  # 只选择背离强度大于0.5的股票
        # ('箱体突破', [20, "up"], 'val:>=0.5', True)  # 选择突破强度大于0.5的股票
        ('超跌反弹', [20, 5, -0.2], 'val:>=0.3', True)  # 选择超跌反弹强度大于0.3的股票
    ]  # 过滤因子列表
}

days_listed = 250  # 上市至今交易天数

# excluded_boards = ["cyb", "kcb", "bj"]  # 同时过滤创业板和科创板和北交所   "cyb", "kcb", "bj"
excluded_boards = ["kcb", "bj"]  # 同时过滤创业板和科创板和北交所   "cyb", "kcb", "bj"

# equity_timing = {"name": "移动平均线", "params": [13]}
# equity_timing = {"name":"双均回撤","params":[5,20,0.1]}

# ====================================================================================================
# 4️⃣ 模拟交易配置
# 以下参数几乎不需要改动
# ====================================================================================================
# initial_cash = 10_0000  # 初始资金10w
initial_cash = 1_0000_0000  # 初始资金1e
# 手续费
c_rate = 1.2 / 10000
# 印花税
t_rate = 1 / 1000
# 并行运行的进程数
n_jobs = 8   # os.cpu_count() - 1

# =====参数预检查=====
if Path(stock_data_path).exists() is False:
    print(f"股票日线数据路径不存在：{stock_data_path}，请检查配置或联系助教，程序退出")
    exit()
if Path(index_data_path).exists() is False:
    print(f"指数数据路径不存在：{index_data_path}，请检查配置或联系助教，程序退出")
    exit()
