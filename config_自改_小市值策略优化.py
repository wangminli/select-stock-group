"""
标题：https://bbs.quantclass.cn/thread/68484
链接：【任务1】【ZZZZZ】小市值策略优化_121.12%_-47.94%_2.53
评价： 发现使用移动平均线和3日涨跌幅效果不好，回撤的时长反而增大了
	亮点：这个log太直了，斜率很大，是我见过最直的，可以在此基础上魔改了
	缺点：
	15年回撤大小：
	22、23年涨跌：
	对数坐标轴斜率：
	RankIC表现：

整体表现：
累积净值                  237.28
年化收益                  81.60%
最大回撤                 -25.17%
最大回撤开始时间      2024-05-17
最大回撤结束时间      2024-06-24
年化收益/回撤比             3.24
盈利周期数                1069.0
亏损周期数                1156.0
胜率                      48.02%
每周期平均收益             0.26%
盈亏收益比                  1.69
单周期最大盈利             8.68%
单周期大亏损              -9.46%
最大连续盈利周期数          10.0
最大连续盈利开始日期  2018-02-07
最大连续盈利结束日期  2018-02-27
最大连续亏损周期数          24.0
最大连续亏损开始日期  2024-01-05
最大连续亏损结束日期  2024-02-07
收益率标准差               1.74%
分年收益率：
             涨跌幅
交易日期
2016-12-31    30.9%
2017-12-31   33.37%
2018-12-31   128.4%
2019-12-31   97.41%
2020-12-31   91.34%
2021-12-31   81.55%
2022-12-31   65.37%
2023-12-31   48.49%
2024-12-31  160.98%
2025-12-31    35.4%
✅ 总手续费: ￥1,743,151.36
"""

"""
邢不行™️选股框架
Python股票量化投资课程

版权所有 ©️ 邢不行
微信: xbx8662

未经授权，不得复制、修改、或使用本代码的全部或部分内容。仅限个人学习用途，禁止商业用途。

Author: 邢不行
"""
import os
from pathlib import Path
from config_file_path import *
# ====================================================================================================
# 1️⃣ 回测配置
# ====================================================================================================
# 回测数据的起始时间。如果因子使用滚动计算方法，在回测初期因子值可能为 NaN，实际的首次交易日期可能晚于这个起始时间。
start_date = "2016-01-01"
# 回测数据的结束时间。可以设为 None，表示使用最新数据；也可以指定具体日期，例如 '2024-11-01'。
end_date = None



# ====================================================================================================
# 3️⃣ 策略配置
# ====================================================================================================
strategy = {
    'name': '策略',  # 策略名
    'hold_period': 'W',  # 持仓周期，W 代表周，M 代表月，还支持日频：3D、5D、10D
    'select_num': 5,  # 选股数量，可以是整数，也可以是小数，比如 0.1 表示选取 10% 的股票
    "factor_list": [
        ('Ret', True, 6, 1),
        ('市值', True, 1, 1),
        ('窗口最高价比值', True, 60, 1)
    ],
    "filter_list": [
        ('窗口最低价比值', 60, 'pct:>=0.3'),  # 排除60天接近最低价区间（连跌）
        ('月份', [1,4], 'val:!=1'),  # 不在1、4月份选股
        ('市值分位', 'None', 'pct:<=0.05')  # 保留市值在市场中前20%的股票（小市值）
    ]  # 过滤因子列表
}

days_listed = 250  # 上市至今交易天数

#excluded_boards = ["bj"]  # 过滤板块，默认不过滤
excluded_boards = ["cyb", "kcb", "bj"]  # 同时过滤创业板和科创板和北交所

# 💡运行提示：
# - 修改hold_period之后，需要执行step2因子计算，不需要再次准备数据
# - 修改select_num之后，只需要再执行step3选股即可，不需要准备数据和计算因子
# - 修改factor_list之后，需要执行step2因子计算，不需要再次准备数据
# - 修改filter_list之后，需要执行step2因子计算，不需要再次准备数据

# 资金曲线再择时配置（非必要，可以为空）
# 用于在回测完成后，对资金曲线进行二次择时，生成动态杠杆
# 可以参考的择时方法：
#   - 移动平均线：根据资金曲线与移动平均线的关系进行择时
#   - 布林带：根据资金曲线与布林带的关系进行择时
#   - 趋势线：根据资金曲线的趋势进行择时
# 参数说明：
#   - name: 择时方法名称
#   - params: 择时方法的参数列表，不同方法参数不同
#     移动平均线: [周期]
#     布林带: [周期, 标准差倍数]
#     趋势线: [周期]
#equity_timing = {'name': 'N日涨跌幅择时', 'params': [3, -0.05]}
#equity_timing = {'name': '移动平均线', 'params': [20]}


# ====================================================================================================
# 4️⃣ 模拟交易配置
# 以下参数几乎不需要改动
# ====================================================================================================
initial_cash = 10_0000  # 初始资金10w
# initial_cash = 1_0000_0000  # 初始资金10w
# 手续费
c_rate = 1.2 / 10000
# 印花税
t_rate = 1 / 1000
# 并行运行的进程数
n_jobs = os.cpu_count() - 1

# =====参数预检查=====
if Path(stock_data_path).exists() is False:
    print(f"股票日线数据路径不存在：{stock_data_path}，请检查配置或联系助教，程序退出")
    exit()
if Path(index_data_path).exists() is False:
    print(f"指数数据路径不存在：{index_data_path}，请检查配置或联系助教，程序退出")
    exit()
